// Media queries

@mixin mq($break) {
  @if $break == "small" {
      @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
        @content;
      }
  } @else if $break == "medium" {
      @media (min-width: $brkpoint-md + 1) {
        @content;
      }
  } @else if $break == "large" {
      @media (min-width: $brkpoint-lg) {
        @content;
      }
  } @else {
    @error "Whoops! No value could be retrieved for '#{$break}'";
  }
}

// Mixins

@mixin bg-colors ($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      background-color: $color;
    }
  }
}

@mixin grid-colors ($map) {
  @each $number, $color in $map {
    &--#{$number} {
      background-color: $color;
    }
  }
}

// Clearfix

%clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}
//Screen reader text-transform

.srt {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// For Pseudo Elements

%pseudos {
  display: block;
  content: '';
  position: absolute;
}

// Center Elements
.centered {
  float: none;
  margin: 0 auto;
}


// BEM selectors

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Adjacent sibling margins

@mixin doubly($margin: 1em) {
  & + & {
    margin-left: $margin;
    @content;
  }
}

// Grid columns

@mixin g-columns {
  @for $i from 1 through $g-col-count {

    $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate column modifier classes

    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}

// Center Images

@mixin img-center {
  display: block;
  margin: 0 auto;
}
